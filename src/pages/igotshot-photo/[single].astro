---
import DynamicIcon from "@/helpers/DynamicIcon";
import Base from "@/layouts/Base.astro";
import { getSinglePage } from "@/lib/contentParser.astro";
import { markdownify } from "@/lib/utils/textConverter";
import PageHeader from "@/partials/PageHeader.astro";
import config from "@/config/config.json";
import Social from "@/components/Social.astro";
import social from "@/config/social.json";
import BildLoesung from "@/components/BildLoesung.astro"; // Import the BildLoesung component

export async function getStaticPaths() {
  const COLLECTION_FOLDER = "igotshot-photo";
  const collection = await getSinglePage(COLLECTION_FOLDER);

  const paths = collection.map((team) => ({
    params: {
      single: team.slug,
    },
    props: { team },
  }));
  return paths;
}

const { team } = Astro.props;
const { slug, data, body, render } = team;

// Daten aus Frontmatter extrahieren
const {
  title,
  beschreibung,
  meta_title,
  designation,
  contacts,
  section,
  description,
  image,
  keywords,
  information,
  logo,
  logodark,
  tag,
  playback, // playback aus MDX holen
  playbackId,
  BildLoesung: showBildLoesung
} = data;

// Überprüfung, ob ein Video vorhanden ist
const hasVideo = playback && playbackId ? true : false;

const { Content } = await render();
---

<Base
  title={title}
  image={image}
  section={section}
  keywords={keywords}
  meta_title={meta_title}
  description={description}
  body_class="page-color-dark-igotshot page-color-light-igotshot"
>
  <!-- Normal Mode -->
  <section class="hidden md:block">
    
     <!-- Video einfügen, falls vorhanden -->
     {hasVideo && (
        <div class="relative w-full h-[600px] flex items-center justify-center" style="background: transparent;">
  <mux-player
    playback-id={playbackId}
    metadata-video-title={title}
    primary-color="#ffffff"
    secondary-color="#000000"
    accent-color="#34a19f"
    autoplay
    loop
    muted
    class="absolute top-0 left-0 w-full h-full object-cover z-0"
  ></mux-player>
</div>
    
    )}
    
    <div class="pb-10">
      <PageHeader title={title} />
    </div>
    
    <div class="container">
      <div class="row gy-4 items-start">
        <aside
          class="lg:col-4 lg:sticky lg:top-0 ms-sticky-sidebar"
          ms-sticky-top-offset="230"
          ms-sticky-bottom-offset="10"
        >
          <div>
            <div class="text-center h-full rounded overflow-hidden group">
              {logo && (
                <img
                  src={logo}
                  width={300}
                  height="full"
                  alt={title ? title : "projekt image"}
                  class="dark:hidden w-full inline-block object-cover pb-8 object-center"
                />
              )}
              {logodark && (
                <img
                  src={logodark}
                  width={300}
                  height="full"
                  alt={title ? title : "projekt image"}
                  class="hidden dark:inline-block w-full object-cover pb-8 object-center"
                />
              )}
              {information && (
                <div class="pt-2 px-4 text-base">
                  {information.map((info) => {
                    const { data, label, icon } = info;
                    return (
                      <div class="p-3 flex justify-between">
                        <p class="font-primary m-0 text-base">
                          {icon && (
                            <DynamicIcon
                              className="inline-block me-2"
                              icon={icon}
                            />
                          )}
                          {label}
                        </p>
                        <span
                          class="text-end text-textdark dark:text-igot"
                          set:html={markdownify(data)}
                        />
                      </div>
                    );
                  })}
                </div>
              )}
              {tag && (
                <div class="px-4 pb-3 text-base">
                  {tag.map((info) => {
                    const { data, label, icon, link } = info;
                    return (
                      <div class="p-3 flex justify-between">
                        <p class="font-primary m-0 text-base">
                          {icon && (
                            <DynamicIcon
                              className="inline-block me-2"
                              icon={icon}
                            />
                          )}
                          {label}
                        </p>
                        <a
                          class="border border-igot rounded-xl hover:bg-igot hover:text-bgweiss dark:hover:text-bgweiss py-1 px-4"
                          href={link}
                        >
                          <span
                            class="text-end hover:text-textweiss"
                            set:html={markdownify(data)}
                          />
                        </a>
                      </div>
                    );
                  })}
                </div>
              )}
              {contacts && (
                <div>
                  <h2 class="h5 pt-2 text-start ml-8" set:html="Information" />
                  <ul class="pl-0 mb-5 md:mb-10">
                    {contacts.map((contact) => {
                      const { id, link, icon } = contact;
                      if (!id) return null;
                      return (
                        <li class="text-color text-start ml-8 my-3">
                          {icon && (
                            <DynamicIcon
                              className="me-3 inline-block"
                              icon={icon}
                            />
                          )}
                          <a href={link}>{id}</a>
                        </li>
                      );
                    })}
                  </ul>
                </div>
              )} 
              <!-- Bilder zum Löschen -->
            {showBildLoesung && <BildLoesung />}
              <hr class="h-px my-2" />
              {config.params.blog_description && (
                <p class="text-start px-4 ml-6" set:html={markdownify(config.params.blog_description)} />
              )}
              <div class="py-4">
                <Social source={social.blog} className="social-icons" />
              </div>
            </div>
          </div>
        </aside>

        <article class="lg:col-8">
          {title && <h2 class="h3" set:html={markdownify(description)} />}
          {designation && (
            <span class="text-primary h6 mb-8" set:html={designation} />
          )}
          {beschreibung && (
            <p class="mb-10" set:html={markdownify(beschreibung)} />
          )}
          {body && (
            <div class="content">
              <Content />
              <div class="py-8 text-igot">
                {config.urheberrecht.title}
                <p class="text-xs italic">
                  {config.urheberrecht.description}
                </p>
              </div>
            </div>
          )}
        </article>
      </div>
    </div>
  </section>

  <!-- Mobile Mode -->
  <section class="md:hidden"> 
    <div class="row gy-4 items-start">
      <article class="w-full">
        {logo && (
          <img
            src={logo}
            width={300}
            height="full"
            alt={title ? title : "projekt image"}
            class="w-full object-cover dark:hidden"
          />
        )}
        {logodark && (
          <img
            src={logodark}
            width={300}
            height="full"
            alt={title ? title : "projekt image"}
            class="w-full object-cover hidden dark:block"
          />
        )}
        <div class="container"> 
          <div class="h1 py-8">{title}</div>
          {title && <h2 class="h2 pt-4" set:html={markdownify(description)} />}
          {designation && (
            <span class="text-primary h6 mb-8" set:html={designation} />
          )}
          {beschreibung && (
            <p class="mb-10" set:html={markdownify(beschreibung)} />
          )}
          {body && (
            <div class="content">
              <Content />
              <div class="pt-8 text-igot">
                {config.urheberrecht.title}
                <p class="text-xs italic">
                  {config.urheberrecht.description}
                </p>
              </div>
            </div>
          )}
        </article>
        <aside class="w-full">
          <div>
            <div class="text-center h-full md:rounded overflow-hidden group">
              {information && (
                <div class="pt-2 px-4 text-base">
                  {information.map((info) => {
                    const { data, label, icon } = info;
                    return (
                      <div class="p-3 flex justify-between">
                        <p class="font-primary m-0 text-base">
                          {icon && (
                            <DynamicIcon
                              className="inline-block me-2"
                              icon={icon}
                            />
                          )}
                          {label}
                        </p>
                        <span
                          class="text-end text-textdark dark:text-igot"
                          set:html={markdownify(data)}
                        />
                      </div>
                    );
                  })}
                </div>
              )}
              {tag && (
                <div class="px-4 pb-3 text-base">
                  {tag.map((info) => {
                    const { data, label, icon, link } = info;
                    return (
                      <div class="p-3 flex justify-between">
                        <p class="font-primary m-0 text-base">
                          {icon && (
                            <DynamicIcon
                              className="inline-block me-2"
                              icon={icon}
                            />
                          )}
                          {label}
                        </p>
                        <a
                          class="border border-igot rounded-xl hover:bg-igot hover:text-bgweiss dark:hover:!text-bgdark py-1 px-4"
                          href={link}
                        >
                          <span
                            class="text-end hover:text-textweiss"
                            set:html={markdownify(data)}
                          />
                        </a>
                      </div>
                    );
                  })}
                </div>
              )}
              {contacts && (
                <div>
                  <h2 class="h5 pt-2 text-start ml-8" set:html="Information" />
                  <ul class="pl-0 mb-5 md:mb-10">
                    {contacts.map((contact) => {
                      const { id, link, icon } = contact;
                      if (!id) return null;
                      return (
                        <li class="text-color text-start ml-8 my-3">
                          {icon && (
                            <DynamicIcon
                              className="me-3 inline-block"
                              icon={icon}
                            />
                          )}
                          <a href={link}>{id}</a>
                        </li>
                      );
                    })}
                  </ul>
                </div>
              )}
    <!-- -->{showBildLoesung && <BildLoesung />}
              <hr class="h-px my-2" />
              <h2 class="h5 pt-2 text-start ml-8" set:html="Folge uns auf" />
              <p
                class="my-2 text-base text-start ml-8"
                set:html="Whatsapp, Instagram, LinkedIn, Vimeo"
              /> 
               <!-- Social Links -->
            <hr class="h-px my-2">
            <h2 class="h5 pt-2 text-start ml-8" set:html="Folge uns auf" />
              <p class="my-2 text-base text-start ml-8" set:html="Whatsapp, Instagram, LinkedIn, Vimeo" />
              <div class="py-4"> 
                <Social source={social.main} className="social-icons" />
              </div>
              </div>
            </div>
          </div>
        </aside>
      </div>
    </div>
  </section>
  <script is:inline>
    // Hier wird der Wert der Variable aus Astro korrekt in den Client-Code injiziert.
    const playbackId = ${JSON.stringify(playbackId)};
    console.log("Playback ID:", playbackId);
  </script>
  
  <script src="https://cdn.jsdelivr.net/npm/@mux/mux-player"></script>
  <style>
    /* Versuche zuerst, die CSS-Custom Property zu nutzen, die der mux-player eventuell unterstützt */
    mux-player {
      --mux-player-background: transparent;
      background-color: transparent !important;
    }
  
    /* Falls der Hintergrund im Shadow DOM des Players gesetzt wird, kannst du ggf. ein ::part-Selektor ansprechen (sofern verfügbar) */
    mux-player::part(container) {
      background-color: transparent !important;
    }
  </style>
</Base>
