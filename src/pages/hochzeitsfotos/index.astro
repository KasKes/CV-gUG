---
import Base from "@/layouts/Base.astro";
import { getSinglePage } from "@/lib/contentParser.astro";
import { getEntry, getEntryBySlug } from "astro:content";
import PageHeader from "@/partials/PageHeader.astro";
import Filter from "@/helpers/Filter";
import { sortByWeight } from "@/lib/utils/sortFunctions";

const {
  body,
  render,
  data: { title, meta_title, keywords, section, description, image},
} = await getEntry("hochzeitsfotos", "-index");

const COLLECTION_FOLDER = "hochzeitsfotos";
const photos = await getSinglePage(COLLECTION_FOLDER);
const { Content } = await render();

const configEntry = await getEntryBySlug("hochzeitsfotos", "-config");
const mainCategories = configEntry.data.categories || [];
const mainCoupleCategories = configEntry.data.couple_categories || [];

const sortCategoryByWeight = (array: any[]) => {
  const withWeight = array.filter((item: any) => item.weight);
  const withoutWeight = array.filter((item: any) => !item.weight);
  const sortedWeightedArray = withWeight.sort((a: any, b: any) => a.weight - b.weight);
  return [...sortedWeightedArray, ...withoutWeight];
};
---

<Base
  title={title}
  image={image}
  meta_title={meta_title}
  description={description}
  keywords={keywords}
  section={section}
  body_class="page-color-dark-hochzeits page-color-light-hochzeits"
>
  <section class="overflow-hidden">
    <div id="default-carousel" class="relative w-full">
      <div class="relative h-1/3 overflow-hidden">
        {
          Array.from({ length: 13 }, (_, i) => (
            <div
              class={`carousel-item ${i === 0 ? "active" : "hidden"} duration-custom ease-in-out transition-opacity`}
              style={{ opacity: i === 0 ? 1 : 0 }}
              key={i}
            >
              <img
                src={`/images/hochzeitsblog/slider/traumhafte-hochzeitsfotos-${String(i + 1).padStart(2, "0")}.jpg`}
                class="block w-full h-full object-cover"
                alt={`Traumhafte Hochzeitsfotos ${i + 1}`}
              />
            </div>
          ))
        }
      </div>
      <div class="flex justify-center items-center mt-4 space-x-4">
        <button
          type="button"
          class="flex items-center justify-center w-10 h-10 text-wedding/40 hover:text-wedding cursor-pointer"
          data-carousel-prev
        >
          &lt;
          <span class="sr-only">Previous</span>
        </button>
        <div class="flex space-x-3">
          {
            Array.from({ length: 13 }, (_, i) => (
              <button
                type="button"
                class="w-3 h-3 rounded-full bg-wedding/40"
                aria-current={i === 0 ? "true" : "false"}
                aria-label={`Slide ${i + 1}`}
                data-carousel-slide-to={i}
                key={i}
              />
            ))
          }
        </div>
        <button
          type="button"
          class="flex items-center justify-center w-10 h-10 text-wedding/40 hover:text-wedding cursor-pointer"
          data-carousel-next
        >
          &gt;
          <span class="sr-only">Next</span>
        </button>
      </div>
      <h1 class="text-center mt-4">{title}</h1>
    </div>
    <style>
      .duration-custom {
        transition: opacity 1.4s ease-in-out;
      }
    </style>
    <script>
      function slider() {
        const carouselItems = document.querySelectorAll(
          "#default-carousel .carousel-item"
        );
        const indicators = document.querySelectorAll(
          "[data-carousel-slide-to]"
        );
        let currentIndex = 0;
        const slideInterval = 3000;

        const showSlide = (index) => {
          carouselItems.forEach((item, i) => {
            item.style.opacity = i === index ? 1 : 0;
            item.classList.toggle("hidden", i !== index);
            item.classList.toggle("block", i === index);
          });
          indicators.forEach((indicator, i) => {
            indicator.classList.toggle("bg-wedding", i === index);
            indicator.classList.toggle("bg-wedding/40", i !== index);
          });
        };

        const nextSlide = () => {
          currentIndex =
            currentIndex < carouselItems.length - 1 ? currentIndex + 1 : 0;
          showSlide(currentIndex);
        };

        document
          .querySelector("[data-carousel-prev]")
          ?.addEventListener("click", () => {
            currentIndex =
              currentIndex > 0 ? currentIndex - 1 : carouselItems.length - 1;
            showSlide(currentIndex);
          });

        document
          .querySelector("[data-carousel-next]")
          ?.addEventListener("click", () => {
            currentIndex =
              currentIndex < carouselItems.length - 1 ? currentIndex + 1 : 0;
            showSlide(currentIndex);
          });

        indicators.forEach((indicator, index) => {
          indicator.addEventListener("click", () => {
            currentIndex = index;
            showSlide(currentIndex);
          });
        });

        setInterval(nextSlide, slideInterval);
        showSlide(currentIndex);
      }
      document.addEventListener("DOMContentLoaded", () => {
        const carousel = document.querySelector("#default-carousel");
        carousel && slider();
      });

      // Make slider work on after page navigating
      document.addEventListener("swup:content:replace", (visit) => {
        const carousel = visit.target.querySelector("#default-carousel");
        carousel && slider();
      });
    </script>
  </section>
  <section class="section pt-10 overflow-hidden">
    <div class="container">
      <div class="row gy-4">
        <div class="col-12 text-center mb-10">{body && <Content />}</div>
        <div class="col-12 relative">
          <Filter
            client:only
            photos={sortByWeight(photos)}
            uniqCategories={sortCategoryByWeight(mainCategories)}
            uniqCoupleCategories={sortCategoryByWeight(mainCoupleCategories)}
          />
          <div
            class="absolute right-5 top-10 md:top-16 lg:top-10 xl:top-0 -z-10 pointer-events-none"
          >
          </div>
          <div class="container relative">
           

          </div>
        </div>
      </div>
    </div>
  </section>
  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const carouselItems = document.querySelectorAll(
        "#default-carousel .carousel-item"
      );
      const indicators = document.querySelectorAll("[data-carousel-slide-to]");
      let currentIndex = 0;

      const showSlide = (index) => {

  carouselItems.forEach((item, i) => {
    item.style.opacity = i === index ? 1 : 0;
    item.classList.toggle("hidden", i !== index);
    item.classList.toggle("block", i === index);
  });
  indicators.forEach((indicator, i) => {
    indicator.setAttribute("aria-current", i === index);
  });
};


      document
        .querySelector("[data-carousel-prev]")
        .addEventListener("click", () => {
          currentIndex =
            currentIndex > 0 ? currentIndex - 1 : carouselItems.length - 1;
          showSlide(currentIndex);
        });

      document
        .querySelector("[data-carousel-next]")
        .addEventListener("click", () => {
          currentIndex =
            currentIndex < carouselItems.length - 1 ? currentIndex + 1 : 0;
          showSlide(currentIndex);
        });

      indicators.forEach((indicator, index) => {
        indicator.addEventListener("click", () => {
          currentIndex = index;
          showSlide(currentIndex);
        });
      });

      showSlide(currentIndex);
    });
  </script>
</Base>