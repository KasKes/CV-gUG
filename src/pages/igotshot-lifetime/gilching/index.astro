---
import Base from "@/layouts/Base.astro";
import { getSinglePage } from "@/lib/contentParser.astro";
import PageHeader from "@/partials/PageHeader.astro";
import { getEntry } from "astro:content";
import ProjectCard from "@/components/ProjectCardIgotshotLifetimeGilching.astro";
import ImageMod from "@/components/ImageMod.astro";
import DynamicIcon from "@/helpers/DynamicIcon";
import { sortByDate } from "@/lib/utils/sortFunctions";
const {
  body,
  render,
  data: { title, meta_title, description, image, keywords },
} = await getEntry("gilching", "-index");

const COLLECTION_FOLDER = "gilching";
const projects = await getSinglePage(COLLECTION_FOLDER);
const { Content } = await render();

const categories: string[] = [];
projects.map(
  (project) => project.data.category && categories.push(project.data.category),
);
const uniqCategories = [...new Set([...categories])];
const sortedProjects = sortByDate(projects);
---

<Base
  title={title}
  image={image}
  keywords={keywords}
  meta_title={meta_title}
  description={description}
  body_class="page-color-dark-igotshot page-color-light-igotshot">
  <PageHeader title={title} />
  <section class="">
    <div class="container">
      <h2 class="text-center py-4">{description}</h2>
      


      
      <!-- Leistung icons
      <div class="mx-6 py-10 justify-center">
        <div
          class="grid gap-4 grid-cols-2 md:grid-cols-3 lg:grid-cols-5 object-center">
          <div class="py-4 text-center">
            <p class="text-6xl">13</p>
            <p>umgesetze Projekte</p>
          </div>
          <div class="py-4 text-center">
            <p class="text-6xl">2</p>
            <p>igot</p>
          </div>
          <div class="py-4 text-center">
            <p class="text-6xl">1</p>
            <p>Kino Projekt</p>
          </div>
          <div class="py-4 text-center">
            <p class="text-6xl">337</p>
            <p>Stunden</p>
          </div>
          <div class="py-4 text-center">
            <p class="text-6xl">5632</p>
            <p>Bilder</p>
          </div>
        </div>
        <div class="text-right uppercase">
          <p class="text-xl">
            Aus unterstüzung für den TV Emmering seit April 2022
          </p>
        </div>
      </div> -->
      <!-- Blog -->
      <div class="row gy-4">
        <div class="col-12">
          {
            uniqCategories && (
              <ul class="flex flex-wrap justify-start md:justify-center gap-2 md:gap-x-4 gap-y-4">
                <li>
                  <button
                    class="transition group block px-6 py-[.18rem] border border-igot rounded-full text-base hover:bg-igot hover:text-white [&.active]:bg-igot [&.active]:text-white active"
                    data-clear-filter-btn="all">
                    <DynamicIcon
                      className="inline-block group-[.active]:!text-white group-hover:!text-white"
                      icon="TfiReload"
                    />
                  </button>
                </li>
                {uniqCategories.map((category) => (
                  <li>
                    <button
                      class="filter-btn transition block px-6 py-1.5 border border-igot rounded-full text-sm md:text-base hover:bg-igot hover:text-white [&.active]:bg-igot [&.active]:text-white"
                      data-type-filter-btn={category}
                      set:html={category}
                    />
                  </li>
                ))}
              </ul>
            )
          }
        </div>
        <div class="col-12">
          <div id="projects-filter" class="row pt-8 gy-4">
            {
              projects.map((project) => {
                return (
                  <div
                    class="md:col-12 lg:col-3"
                    data-filter-type={project.data.category}>
                    <ProjectCard content={project} />
                  </div>
                );
              })
            }
          </div>
        </div>
      </div>
  <script>
    const projectWrapper = document.querySelector("#projects-filter");
    const clearFilterBtn = document.querySelector("[data-clear-filter-btn]");
    const listItems = Array.from(
      document.querySelectorAll("[data-filter-type]"),
    );

    const filterTypeBtns = Array.from(
      document.querySelectorAll("[data-type-filter-btn]"),
    );

    let filterType = "";
    filterTypeBtns.forEach((filterTypeBtn) => {
      filterTypeBtn.addEventListener("click", () => {
        clearFilterBtn?.classList.remove("active");
        // Remove "active" class from all buttons
        filterTypeBtns.forEach((btn) => {
          btn.classList.remove("active");
        });

        // Add "active" class to the clicked button
        filterTypeBtn.classList.add("active");

        filterType = (filterTypeBtn as HTMLElement).dataset.typeFilterBtn || "";

        const hasClass =
          projectWrapper &&
          Array.from(projectWrapper.children).some((child) =>
            child.classList.contains("hidden"),
          );

        if (!hasClass) {
          projectWrapper?.classList.add("animate-parent");
        }

        setTimeout(() => {
          listItems.forEach((listItem) => {
            listItem.classList.remove("hidden");

            if ((listItem as HTMLElement).dataset.filterType === filterType) {
              listItem.classList.remove("hidden");
            } else {
              listItem.classList.add("hidden");
            }
          });
          projectWrapper?.classList.remove("animate-parent");
        }, 1);
      });
    });

    clearFilterBtn?.addEventListener("click", () => {
      clearFilterBtn?.classList.add("active");
      filterTypeBtns.forEach((btn) => {
        btn.classList.remove("active");
      });

      listItems.forEach((listItem) => {
        listItem.classList.remove("hidden");
      });
    });
  </script>
</Base>
