---
import DynamicIcon from "@/helpers/DynamicIcon";
import Base from "@/layouts/Base.astro";
import { getSinglePage } from "@/lib/contentParser.astro";
import { markdownify } from "@/lib/utils/textConverter";
import PageHeader from "@/partials/PageHeader.astro";
import Social from "@/components/Social.astro";
import social from "@/config/social.json";
import { sortByDate } from "@/lib/utils/sortByDate";
import { getCollection } from "astro:content";

export async function getStaticPaths() {
  const COLLECTION_FOLDER = "filmgespraech";
  const teamCollection = await getSinglePage(COLLECTION_FOLDER);

  const paths = teamCollection.map((team) => ({
    params: {
      single: team.slug,
    },
    props: { team },
  }));
  return paths;
}

const {
  team: { data, body, render },
} = Astro.props;

const {
  title,
  logo,
  logodark,
  meta_title,
  contacts,
  section,
  description,
  image,
  keywords,
  tag,
  information,
  noindex,
  dataSource, // Wert kommt aus der MDX-Datei
  showCurriculum,
  bilder1,
} = data;

// Blog-EintrÃ¤ge basierend auf `dataSource` dynamisch laden
let blogEntriesAssembly: any[] = [];
if (dataSource && showCurriculum) {
  blogEntriesAssembly = await getCollection(dataSource, ({ data }: { data: any }) => {
    return data.draft !== true;
  });
}

const { Content } = await render();

---

<Base
  title={title}
  image={image}
  keywords={keywords}
  meta_title={meta_title}
  description={description}
  noindex={noindex}
  body_class="page-color-dark-video page-color-light-video">
  <PageHeader title={title}/>
  <section class="pt-12">
    <div class="container">
      <div class="row items-start">
        <aside
          class="lg:col-4 lg:sticky lg:top-0 ms-sticky-sidebar"
          ms-sticky-top-offset="230"
          ms-sticky-bottom-offset="10">
          <div class="flex flex-col gap-12">
            <div class="text-center h-full md:rounded overflow-hidden group">
              {
                logo && (
                  <img
                    src={logo}
                    width={300}
                    height="full"
                    alt={title ? title : "projekt image"}
                    class="dark:hidden w-full inline-block object-cover pb-8 object-center"
                  />
                )
              }
              {
                logo && (
                  <img
                    src={logodark}
                    width={300}
                    height="full"
                    alt={title ? title : "projekt image"}
                    class="hidden dark:inline-block w-full object-cover pb-8 object-center"
                  />
                )
              }
              {
                information && (
                  <div class="py-2 px-4 pb-3">
                    {information.map((info) => {
                      const { data, label, icon } = info;
                      return (
                        <div class="p-3 flex justify-between">
                          <p class=" font-primary m-0">
                            {icon && (
                              <DynamicIcon
                                className="inline-block me-2"
                                icon={icon}
                              />
                            )}
                            {label}
                          </p>
                          <span
                            class="font-medium text-end text-dark dark:text-video"
                            set:html={markdownify(data)}
                          />
                        </div>
                      );
                    })}
                  </div>
                )
              }
              {tag && (
                <div class="px-4 pb-3 text-base">
                  {tag.map((info: any) => {
                    const { data, label, icon, link } = info;
                    return (
                      <div class="p-3 flex justify-between ">
                        <p class=" font-primary m-0 text-base">
                          {icon && (
                            <DynamicIcon
                              className="inline-block me-2"
                              icon={icon}
                            />
                          )}
                          {label}
                        </p>
                        <a class="border border-video rounded-xl hover:bg-video hover:text-bgweiss dark:hover:text-bgdark py-1 px-4"
                          href={link}>
                        <span
                          class="text-end hover:text-textweiss "
                          set:html={markdownify(data)}
                        /></a>
                      </div>
                    );
                  })}
                </div>
              )}
              <div>
                {contacts && (
                  <hr class="h-px my-2">
                  <h2 class="h5 pt-2 text-start ml-8" set:html="Information" />
                  <ul class="pl-0 mb-5 md:mb-10">
                    {contacts.map((contact: any) => {
                      const { id, link, icon } = contact;
                      if (!id) return null;
                      return (
                        <li class="text-color text-start ml-8 my-3">
                          {icon && (
                            <DynamicIcon
                              className="me-3 inline-block"
                              icon={icon}
                            />
                          )}
                          <a href={link} class="">
                            {id}
                          </a>
                        </li>
                      );
                    })}
                  </ul>
                )}
              </div>
           <!-- Social Links -->
            <hr class="h-px my-2">
              <h2 class="h5 pt-2 text-start ml-8" set:html="Folge uns auf" />
                <p class="my-2 text-base text-start ml-8" set:html="Whatsapp, Instagram, LinkedIn, Vimeo" />
                <div class="py-4"> 
                  <Social source={social.main} className="social-icons" />
                </div>
            </div>
          </div>
        </aside>
        <article class="lg:col-8 justify-end items-end">
          {showCurriculum && (
            <section class="px-4 bg-video/20 rounded">
              <div class="text-center pt-8">
                <h2 id="termine" class="text-video text-4xl underline-offset-8 underline font-bold pb-8">Curriculum Cinematicum</h2>
                <div class="py-2 pl-4 md:pl-8">
                  {blogEntriesAssembly
                    .sort(sortByDate)
                    .slice(0, 50)
                    .map((blogPostEntry: any) => (
                      <ol class="relative border-l-2 border-video pl-4">
                        <li class="mb-10 ml-6 md:ml-12">
                          <span class="absolute flex items-center justify-center w-8 h-8 md:w-12 md:h-12 ml-2 md:ml-0 bg-white rounded-full -left-6 ring-4 ring-video">
                            <svg
                              class="w-4 h-4 md:w-6 md:h-6"
                              aria-hidden="true"
                              xmlns="http://www.w3.org/2000/svg"
                              fill="currentColor"
                              viewBox="0 0 20 20">
                              <path d="M20 4a2 2 0 0 0-2-2h-2V1a1 1 0 0 0-2 0v1h-3V1a1 1 0 0 0-2 0v1H6V1a1 1 0 0 0-2 0v1H2a2 2 0 0 0-2 2v2h20V4ZM0 18a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V8H0v10Zm5-8h10a1 1 0 0 1 0 2H5a1 1 0 0 1 0-2Z" />
                            </svg>
                          </span>
                          <h3 class="flex text-start mb-1 text-video text-2xl md:text-3xl">{blogPostEntry.data.title}</h3>
                          <time class="block text-start mb-2 text-lg font-normal leading-none text-video">{blogPostEntry.data.visibleDate}</time>
                          <p class="mb-4 text-start">{blogPostEntry.data.description}</p>
                          {blogPostEntry.data.link && (
                            <p class="mb-4 text-start text-sm">
                              <a
                                href={`#${blogPostEntry.data.link}`}
                                class="text-video hover:underline hover:text-video-dark transition-colors">
                                Mehr erfahren...
                              </a>
                            </p>
                          )}
                        </li>
                      </ol>
                    ))}
                </div>
              </div>
            </section>
          )}

          <div class="row pb-10">
            {body && <p class="content "><Content /></p>}
          </div>
        </article>
      </div>
    </div>
  </section>
</Base>
