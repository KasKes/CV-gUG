---
import Base from "@/layouts/Base.astro";
import VideoCarousel from "@/components/VideoCarousel.astro";
import DVDCoverSlider from "@/layouts/components/DVDCoverSlider.astro";

---

<Base
  title="Cinema Projekte – Campos Viola"
  meta_title="Cinema | Dokumentationen"
  description="Erlebe beeindruckende Filme und Dokumentationen von Campos Viola. Entdecke Projekte, die inspirieren und Geschichten erzählen, die berühren."
  keywords="Film, Dokumentation, Campos Viola, Videoproduktion, Kino"
  image=""
  body_class="page-color-dark-video page-color-light-video"
>

<section>
  <!-- Video Carousel -->
  <div class="relative z-0">
    <VideoCarousel />
  </div>

  <!-- DVD-Cover Slider -->
  <div class="-mt-56 relative z-10">  
    <DVDCoverSlider />
  </div>
</section>

<script>
  // Initialisierung der Logik für die Seite
  document.addEventListener("astro:page-load", () => {
    console.log("Seite wurde neu geladen. Initialisiere Inhalte...");
    initVideoController();
  });

  // Hauptlogik für Video-Controller
  function initVideoController() {
    console.log("VideoController initialisiert.");
    
    const activeCover = document.getElementById("main-dvd-cover");
    const activeTitle = document.getElementById("main-video-title");
    const activeDescription = document.getElementById("main-video-description");
    const activeBody = document.querySelector(".text-video-body");
    const activeDetails = document.querySelectorAll(".video-details span");
    const activeBanderole = document.getElementById("main-banderole");
    
    const trailerButton = document.getElementById("trailer-button");
    const filmButton = document.getElementById("film-button");
    const blogButton = document.getElementById("blog-button");
    
    const thumbnails = document.querySelectorAll(".carousel-thumbnail");
    const videoItems = document.querySelectorAll(".carousel-item");
    
    const popup = document.getElementById("popup");
    const popupVideoPlayer = document.getElementById("popup-video-player");
    
    let currentIndex = 0;

    // Funktion zum Wechseln der Videos
    const showSlide = (index) => {
      const selectedThumbnail = thumbnails[index];
      const cover = selectedThumbnail.dataset.cover;
      const title = selectedThumbnail.dataset.title;
      const description = selectedThumbnail.dataset.description;
      const body = selectedThumbnail.dataset.body || "<p>Keine zusätzliche Beschreibung vorhanden.</p>";
      const datum = selectedThumbnail.dataset.datum;
      const duration = selectedThumbnail.dataset.duration;
      const videoQuality = selectedThumbnail.dataset.videoquality;
      const resolution = selectedThumbnail.dataset.resolutiontier;
      const frameRate = selectedThumbnail.dataset.maxframerate;
      const aspectRatio = selectedThumbnail.dataset.aspectratio;
      const blogLink = selectedThumbnail.dataset.blog;
      const playbackId = selectedThumbnail.dataset.playbackid;
      const playvollId = selectedThumbnail.dataset.playvollid;
      const banderole = selectedThumbnail.dataset.banderole;

      // Cover und Details aktualisieren
      activeCover.src = cover;
      activeTitle.textContent = title;
      activeDescription.textContent = description;
      activeBody.innerHTML = body;

      // Banderole aktualisieren
      if (activeBanderole) {
        if (banderole) {
          activeBanderole.textContent = banderole;
          activeBanderole.style.display = "block";
        } else {
          activeBanderole.style.display = "none";
        }
      }

      // Details aktualisieren
      activeDetails[0].textContent = datum || "Unbekannt";
      activeDetails[1].textContent = duration || "Unbekannt";
      activeDetails[2].textContent = videoQuality || "Unbekannt";
      activeDetails[3].textContent = resolution || "Unbekannt";
      activeDetails[4].textContent = frameRate || "Unbekannt";
      activeDetails[5].textContent = aspectRatio || "Unbekannt";

      // Video aktualisieren
      videoItems.forEach((video, i) => {
        const videoPlayer = video.querySelector("mux-player");
        if (i === index) {
          video.classList.remove("hidden");
          video.style.opacity = 1;
          if (videoPlayer && videoPlayer.paused) {
            videoPlayer.play();
          }
        } else {
          video.classList.add("hidden");
          video.style.opacity = 0;
          if (videoPlayer && !videoPlayer.paused) {
            videoPlayer.pause();
            videoPlayer.currentTime = 0;
          }
        }
      });

      // Buttons aktualisieren
      trailerButton.style.display = playbackId ? "inline-block" : "none";
      filmButton.style.display = playvollId ? "inline-block" : "none";
      blogButton.style.display = blogLink ? "inline-block" : "none";

      if (playbackId) trailerButton.onclick = () => openPopup("trailer", playbackId);
      if (playvollId) filmButton.onclick = () => openPopup("film", playvollId);
      if (blogLink) blogButton.href = blogLink;

      // Aktive Thumbnails verwalten
      thumbnails.forEach((thumb, i) => {
        thumb.classList.remove("hidden");
        thumb.classList.toggle("active", i === index);
      });
      selectedThumbnail.classList.add("hidden");

      currentIndex = index;
    };

    // Popup-Logik
    window.openPopup = (type, playbackId) => {
      if (!playbackId) return;
      popup.classList.remove("hidden");
      popupVideoPlayer.setAttribute("playback-id", playbackId);
      popupVideoPlayer.play();
    };

    window.closePopup = () => {
      popup.classList.add("hidden");
      popupVideoPlayer.pause();
      popupVideoPlayer.removeAttribute("playback-id");
    };

    // Thumbnails-Events
    thumbnails.forEach((thumbnail, index) => {
      thumbnail.addEventListener("click", () => {
        showSlide(index);
      });
    });

    // Erstes Video laden
    showSlide(currentIndex);
  }

  // Swup-Ereignis, um Skripte neu zu laden
  document.addEventListener("swup:contentReplaced", () => {
    console.log("Inhalt ersetzt. Skripte neu initialisieren...");
    initVideoController();
  });
</script>

</Base>
