---
import Base from "@/layouts/Base.astro";
import { getSinglePage } from "@/lib/contentParser.astro";
import PageHeader from "@/partials/PageHeader.astro";
import { getEntry } from "astro:content";
import ProjectCard from "@/components/ProjectCardIgotshot.astro";
import { sortByDate } from "@/lib/utils/sortFunctions";
import DynamicIcon from "@/helpers/DynamicIcon";

const {
  body,
  render,
  data: { title, meta_title, description, image, keywords },
} = await getEntry("igotshot", "-index");

const projects = (await getSinglePage("igotshot-photo")).concat(
  await getSinglePage("igotshot-lifetime")
);
const { Content } = await render();
const sortedProjects = sortByDate(projects);
const categories: string[] = [];
projects.map((project) => {
  if (project.data.category) {
    if (Array.isArray(project.data.category)) {
      project.data.category.map((category) => {
        categories.push(category);
      });
    } else {
      categories.push(project.data.category);
    }
  }
});
const uniqCategories = [...new Set([...categories])];
---

<Base
  title={title}
  meta_title={meta_title}
  description={description}
  keywords={keywords}
  image={image}
  body_class="page-color-dark-igotshot page-color-light-igotshot">
  <PageHeader title={title} />
  {
    (
      <section class="py-8">
        <div class="container">
          <div class="row">
            <div class="col-12 text-center pb-8">
              {body && (
                <div class="content text-textdark dark:text-igot">
                  <Content />
                </div>
              )}
            </div>
            <div class="col-12 mb-12">
          {uniqCategories && (
            <ul class="flex flex-wrap justify-start items-center md:justify-center gap-2 md:gap-x-4 gap-y-4">
              <li>
                <button
                  class="transition group block px-6 py-[.2rem] border border-igot rounded-full text-base hover:bg-igot hover:text-bgweiss dark:hover:text-bgdark [&.active]:bg-igot [&.active]:text-bgweiss active"
                  data-clear-filter-btn="all">
                  <DynamicIcon
                    className="inline-block group-[.active]:!text-bgweiss group-hover:!text-bgweiss dark:group-[.active]:!text-bgdark dark:group-hover:!text-bgdark"
                    icon="TfiReload"
                  />
                </button>
              </li>
              {uniqCategories.map((category) => (
                <li>
                  <button
                    class="filter-btn transition block px-6 py-1.5 border border-igot rounded-full text-sm md:text-base hover:bg-igot text-igot hover:text-bgweiss dark:hover:text-bgdark [&.active]:bg-igot [&.active]:text-bgweiss dark:[&.active]:text-bgdark"
                    data-type-filter-btn={category}
                    set:html={category}
                  />
                </li>
              ))}
            </ul>
          )}
        </div>
            <div class="col-12">
              <div id="projects-filter" class="row gy-4">
                {projects.map((project) => {
                  return (
                    <div
                      class="sm:col-12 md:cal-6 lg:col-3 xl:cal-4"
                      data-filter-type={project.data.category}>
                      <ProjectCard content={project} />
                    </div>
                  );
                })}
              </div>
            </div>
          </div>
        </div>
      </section>
    )
  }
  <script>
    const projectWrapper = document.querySelector("#projects-filter");
    const clearFilterBtn = document.querySelector("[data-clear-filter-btn]");
    const listItems = Array.from(
      document.querySelectorAll("[data-filter-type]")
    );

    const filterTypeBtns = Array.from(
      document.querySelectorAll("[data-type-filter-btn]")
    );

    let filterType = "";
    filterTypeBtns.forEach((filterTypeBtn) => {
      filterTypeBtn.addEventListener("click", () => {
        clearFilterBtn?.classList.remove("active");
        // Remove "active" class from all buttons
        filterTypeBtns.forEach((btn) => {
          btn.classList.remove("active");
        });

        // Add "active" class to the clicked button
        filterTypeBtn.classList.add("active");

        filterType = (filterTypeBtn as HTMLElement).dataset.typeFilterBtn || "";

        const hasClass =
          projectWrapper &&
          Array.from(projectWrapper.children).some((child) =>
            child.classList.contains("hidden")
          );

        if (!hasClass) {
          projectWrapper?.classList.add("animate-parent");
        }

        setTimeout(() => {
          listItems.forEach((listItem) => {
            listItem.classList.remove("hidden");

            if ((listItem as HTMLElement).dataset.filterType?.includes(filterType)) {
              listItem.classList.remove("hidden");
            } else {
              listItem.classList.add("hidden");
            }
          });
          projectWrapper?.classList.remove("animate-parent");
        }, 1);
      });
    });

    clearFilterBtn?.addEventListener("click", () => {
      clearFilterBtn?.classList.add("active");
      filterTypeBtns.forEach((btn) => {
        btn.classList.remove("active");
      });

      listItems.forEach((listItem) => {
        listItem.classList.remove("hidden");
      });
    });
  </script>
</Base>
