---
import config from "@/config/config.json";
import DynamicIcon from "@/helpers/DynamicIcon";
import { markdownify, slugify } from "@/lib/utils/textConverter";
import type { CollectionEntry } from "astro:content";
import dateFormat from "@/lib/utils/dateFormat";
import { sortByDate } from "@/lib/utils/sortFunctions";
import Social from "@/components/Social.astro";
import social from "@/config/social.json";

interface Props {
  content: CollectionEntry<"services">;
  servicesCollection: CollectionEntry<"services">[];
  sticky: boolean;
}

const {
  sticky,
  content: {
    data: { logo, title, tag, contacts, information },
    slug,
  },
  servicesCollection,
} = Astro.props;

const CollectionEntry = sortByDate(servicesCollection);
---

<aside
  class={`${sticky ? "lg:sticky lg:top-0 ms-sticky-sidebar" : "lg:order-1 order-2 sticky top-0"} lg:col-3`}
  {...sticky
    ? { "ms-sticky-top-offset": "230", "ms-sticky-bottom-offset": "10" }
    : {}}>
  <div class="flex flex-col">
    {
      logo && (
        <img
          src={logo}
          width={300}
          height="full"
          alt={title ? title : "projekt image"}
          class="w-full inline-block object-cover mb-8 object-center rounded"
        />
      )
    }
    {
      servicesCollection && (
        <ul class="[&>:not(:last-child)]: border border-[var(--pageColor)] pl-0 rounded overflow-hidden">
          {servicesCollection.map((serviceItem) => {
            if (!serviceItem.data.title) return null;
            const { title } = serviceItem.data;
            return (
              <li>
                <a
                  href={`/igotshot-lifetime/gilching/${slugify(title)}/`}
                  class={`btnIgot text-bgdark dark:text-igot  hover:text-underline  hover:text-igot underline-offset-8 w-full rounded-none px-6 py-4 ${
                    serviceItem.slug === slug ? ` bg-igot/20 underline` : ""
                  }`}
                  set:html={markdownify(title)}
                />
              </li>
            );
          })}
        </ul>
      )
    }
    <div>
      <ul class="flex flex-col h5 pt-8 text-base">
        {
          information && (
            <div class="pt-2 text-base">
              {information.map((info) => {
                const { data, label, icon } = info;
                return (
                  <div class="p-3 flex justify-between">
                    <p class=" font-primary m-0 text-base">
                      {icon && (
                        <DynamicIcon
                          className="inline-block me-2"
                          icon={icon}
                        />
                      )}
                      {label}
                    </p>
                    <span
                      class="text-end text-textdark dark:text-igot"
                      set:html={markdownify(data)}
                    />
                  </div>
                );
              })}
            </div>
          )
        }
        {
          tag && (
            <div class="pb-3 text-base">
              {tag.map((info) => {
                const { data, label, icon, link } = info;
                return (
                  <div class="p-3 flex justify-between ">
                    <p class=" font-primary m-0 text-base">
                      {icon && (
                        <DynamicIcon
                          className="inline-block me-2"
                          icon={icon}
                        />
                      )}
                      {label}
                    </p>
                    <a class="border border-igot rounded-xl hover:bg-igot hover:text-slate-100 dark:hover:text-bgdark py-1 px-2"
                      href={link}>
                    <span
                      class="text-end hover:text-textweiss "
                      set:html={markdownify(data)}
                    /></a>
                  </div>
                );
              })}
            </div>
          )
        }
        <div>
          { contacts && (
            <hr class="h-px my-2">
                <h2 class="h5 pt-2 text-start" set:html="Information" />
                <ul class="pl-0 mb-5 md:mb-10">
                  {contacts.map((contact) => {
                    const { id, link, icon } = contact;
                    if (!id) return null;
                    return (
                      <li class="text-color text-start my-3">
                        {icon && (
                          <DynamicIcon
                            className="me-3 inline-block"
                            icon={icon}
                          />
                        )}
                        <a href={link} class="">
                          {id}
                        </a>
                      </li>
                    );
                  })}
                </ul>
              
            )
          }
        </div>
     <!-- Social Links -->
      <hr class="h-px my-2">
        <h2 class="h5 pt-2 text-start" set:html="Folge uns auf" />
          <p class="my-2 text-base text-start" set:html="Whatsapp, Instagram, LinkedIn, Vimeo" />
          <div class="py-4"> 
            <Social source={social.main} className="social-icons" />
          </div>
      </div>
    </div>
  </aside>